#+OPTIONS: ^:{}
* Chapter 11:Networking
** socket--Network Communication
*** Addressing, Protocol Families, and Socket Types
    + socket 是用来在internet上交换数据的一种"单向"数据结构,它有两个主要的属性:
      - address family: 选择network layer protocol
      - socket type: 选择transport layer protocol
    + Address Family方面:
      - AF_INET: IPv4 Internet addressing, 16-bit address
      - AF_INET6: IPv6 Internet addressing, 128-bit address
      - AF_UNIX: Unix Domain Socket(UDS). 只在POSIX机器上适用, 可以允许在
	proces之间传递数据,而不需要经过network层.这种方法效率高,但是要求必须
	client server都支持UDS, 所以如果client server都是同一台机器,可以考
	虑使用.
    + Socket Type方面:
      - SOCK_DGRAM: UDP
      - SOCK_STREAM: TCP
**** Looking Up Hosts on the Network
     + 可以通过gethostname()来获取当前host的official name
       #+begin_src python
         import socket
         
         print socket.gethostname()
         
         # Output:
         # <==================================================================
         # SH-RD-HFENG
         # ==================================================================>
       #+end_src
     + 可以通过gethostbyname()来获取ip地址
       #+begin_src python
         import socket
         
         for host in ['homer', 'www', 'www.python.org', 'nosuchname']:
             try:
                 print '%s : %s' % (host, socket.gethostbyname(host))
             except socket.error, msg:
                 print '%s : %s' % (host, msg)
         
         # Output:
         # <==================================================================
         # homer : 130.164.14.174
         # www : 130.164.81.10
         # www.python.org : 82.94.164.162
         # nosuchname : [Errno 11004] getaddrinfo failed 
         # ==================================================================>
       #+end_src
     + 还可以通过gethostbyname_ex()来获取更加详细的信息
       #+begin_src python
         import socket
         
         for host in ['homer', 'www', 'www.python.org', 'nosuchname']:
             print host
             try:
                 hostname, aliases, addresses = socket.gethostbyname_ex(host)
                 print ' Hostname   :', hostname
                 print ' Aliases    :', aliases
                 print ' Addresses  :', addresses
             except socket.error as msg:
                 print ' ERROR:', msg
             print
         
         # Output:
         # <==================================================================
         # homer
         #  Hostname   : homer.natinst.com
         #  Aliases    : []
         #  Addresses  : ['130.164.14.174']
         # 
         # www
         #  Hostname   : www.natinst.com
         #  Aliases    : []
         #  Addresses  : ['130.164.81.10']
         # 
         # www.python.org
         #  Hostname   : www.python.org
         #  Aliases    : []
         #  Addresses  : ['82.94.164.162']
         # 
         # nosuchname
         #  ERROR: [Errno 11004] getaddrinfo failed 
         # ==================================================================>
       #+end_src
     + getfqdn()能够得到host的全程
       #+begin_src python
         import socket
         
         for host in ['homer', 'www']:
             print '%6s: %s' % (host, socket.getfqdn(host))
         
         # Output:
         # <==================================================================
         # homer: homer.natinst.com
         # www: ws-cl-ap-ext-prod.natinst.com 
         # ==================================================================>
       #+end_src
     + gethostbyaddr(), 可以通过ip地址获取host信息
       #+begin_src python
         import socket
         
         hostname, aliases, addresses = socket.gethostbyaddr('10.144.8.51')
         
         print 'Hostname   :', hostname
         print 'Aliases    :', aliases
         print 'Addresses  :', addresses
         
         # Output:
         # <==================================================================
         # Hostname   : SH-RD-HFENG.apac.corp.natinst.com
         # Aliases    : []
         # Addresses  : ['10.144.8.51']
         # ==================================================================>
       #+end_src
     + 可以通过getservbyname来取得网络服务的端口号(需要parsed_url帮助)
       #+begin_src python
         import socket
         from urlparse import urlparse
         for url in [ 'http://www.python.org',
                      'https://www.mybank.com',
                      'ftp://prep.ai.mit.edu',
                      'gopher://gopher.micro.umn.edu',
                      'smtp://mail.example.com',
                      'imap://mail.example.com',
                      'imaps://mail.example.com',
                      'pop3://pop.example.com',
                      'pop3s://pop.example.com',
                      ]:
             parsed_url = urlparse(url)
             port = socket.getservbyname(parsed_url.scheme)
             print '%6s : %s' % (parsed_url.scheme, port)
         
         # Output:
         # <==================================================================
         #   http : 80
         #  https : 443
         #    ftp : 21
         # gopher : 70
         #   smtp : 25
         #   imap : 143
         #  imaps : 993
         #   pop3 : 110
         #  pop3s : 995
         # ==================================================================>
       #+end_src
     + 可以通过getservbyport()来取得协议标记
       #+begin_src python
         import socket
         import urlparse
         
         for port in [80, 443, 21, 70, 25, 143, 993, 110, 995]:
             print urlparse.urlunparse(
                 (socket.getservbyport(port), 'example.com', '/', '', '', '')
                 )
         
         # Output:
         # <==================================================================
         # http://example.com/
         # https://example.com/
         # ftp://example.com/
         # gopher://example.com/
         # smtp://example.com/
         # imap://example.com/
         # imaps://example.com/
         # pop3://example.com/
         # pop3s://example.com/ 
         # ==================================================================>
       #+end_src
     + 可以通过getportobyname来获取服务的端口号
       #+begin_src python
         import socket
         
         def get_constants(prefix):
             """Create a dictionary mapping socket module
             constants to their names.
             
             Arguments:
             - `prefix`:
             """
             return dict( (getattr(socket, n), n)
                          for n in dir(socket)
                          if n.startswith(prefix)
                          )
         
         protocols = get_constants('IPPROTO_')
         
         for name in ['icmp', 'udp', 'tcp']:
             proto_num = socket.getprotobyname(name)
             const_name = protocols[proto_num]
             print '%4s -> %2d (socket.%-12s = %2d)' %\
               (name, proto_num, const_name, getattr(socket, const_name))
         
         # Output:
         # <==================================================================
         # icmp ->  1 (socket.IPPROTO_ICMP =  1)
         #  udp -> 17 (socket.IPPROTO_UDP  = 17)
         #  tcp ->  6 (socket.IPPROTO_TCP  =  6)
         # ==================================================================>
       #+end_src
**** Looking Up Server Addresses
     + getaddrinfo()能够返回一个tuple里面有根据协议而不同的更加详尽的信息.
       #+begin_src python
         import socket
         
         def get_constants(prefix):
             """Create a dictionary mapping socket module
             constants to their names.
             
             Arguments:
             - `prefix`:
             """
             return dict( (getattr(socket, n), n)
                          for n in dir(socket)
                          if n.startswith(prefix)
                          )
         
         families = get_constants('AF_')
         types = get_constants('SOCK_')
         protocols = get_constants('IPPROTO_')
         
         for response in socket.getaddrinfo('www.python.org', 'http'):
             family , socktype, proto, canonname, sockaddr = response
         
             print 'Family        :', families[family]
             print 'Type          :', types[socktype]
             print 'Protocol      :', protocols[proto]
             print 'Canonical name:', canonname
             print 'Socket address:', sockaddr
         
         
         # Output:
         # <==================================================================
         # Family        : AF_INET
         # Type          : SOCK_STREAM
         # Protocol      : IPPROTO_IP
         # Canonical name: 
         # Socket address: ('82.94.164.162', 80)
         # Family        : AF_INET6
         # Type          : SOCK_STREAM
         # Protocol      : IPPROTO_IP
         # Canonical name: 
         # Socket address: ('2001:888:2000:d::a2', 80, 0, 0) 
         # ==================================================================>
             
       #+end_src
     + getaddrinfo()还可以带参数
       #+begin_src python
         import socket
         
         def get_constants(prefix):
             """Create a dictionary mapping socket module
             constants to their names.
             
             Arguments:
             - `prefix`:
             """
             return dict( (getattr(socket, n), n)
                          for n in dir(socket)
                          if n.startswith(prefix)
                          )
         
         families = get_constants('AF_')
         types = get_constants('SOCK_')
         protocols = get_constants('IPPROTO_')
         
         for response in socket.getaddrinfo('www.doughellmann.com', 'http',
                                            socket.AF_INET, 
                                            socket.SOCK_STREAM,
                                            socket.IPPROTO_TCP,
                                            socket.AI_CANONNAME, 
                                            ):
             family , socktype, proto, canonname, sockaddr = response
         
             print 'Family        :', families[family]
             print 'Type          :', types[socktype]
             print 'Protocol      :', protocols[proto]
             print 'Canonical name:', canonname
             print 'Socket address:', sockaddr
         
         # Output:
         # <==================================================================
         # Family        : AF_INET
         # Type          : SOCK_STREAM
         # Protocol      : IPPROTO_TCP
         # Canonical name: doughellmann.com
         # Socket address: ('50.56.75.233', 80)
         # ==================================================================>
       #+end_src       
**** IP Address Representations
     + C 语言里面会把IP地址转换成二进制, 在python中将c语言的表达方式进行转换的函数是
       inet_aton(), inet_ntoa()
       #+begin_src python
         import binascii
         import socket
         import struct
         import sys
         
         for string_address in ['192.168.1.1', '127.0.0.1']:
             packed = socket.inet_aton(string_address)
             print 'Original  :', string_address
             print 'Packed    :', binascii.hexlify(packed)
             print 'Unpacked  :', socket.inet_ntoa(packed)
             print
         
         # Output:
         # <==================================================================
         # Original  : 192.168.1.1
         # Packed    : c0a80101
         # Unpacked  : 192.168.1.1
         # 
         # Original  : 127.0.0.1
         # Packed    : 7f000001
         # Unpacked  : 127.0.0.1 
         # ==================================================================>
       #+end_src
     + 还可以使用inet_pton()和inet_ntop()来转换IPv6地址的普通(normal)模式和打包
       (pack)模式.
       #+begin_src python
         # 2.7 feature
         import binascii
         import socket
         import struct
         import sys
         
         string_address = '2001:ac10:10a:1234:21e:52ff:fe74:40e'
         packed = socket.inet_pton(socket.AF_INET6, string_address)
         
         print 'Original    :', string_address
         print 'Packed      :', binascii.hexlify(packed)
         print 'Unpacked    :', socket.inet_ntop(socket.AF_INET6, packed)
         
         # Output:
         # <==================================================================
         # python test.py
         # Original    : 2001:ac10:10a:1234:21e:52ff:fe74:40e
         # Packed      : 2001ac10010a1234021e52fffe74040e
         # Unpacked    : 2001:ac10:10a:1234:21e:52ff:fe74:40e
         # ==================================================================>
       #+end_src
*** TCP/IP Client and Server
    + socket可以被配置为一个server,并且听取来自client的message.如果两个方向的socket
      都连接的话(因为socket是单向的),那么就说连接建立成功了.
**** Echo Server
     + 首先我们建立一个echo server, 绑定到localhost, 10000这个组合上面,等待client
       来进行连接
       #+begin_src python
         import socket
         import sys       
         
         # Create a TCP/IP socket
         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         
         # Bind the socket to the port
         server_address = ('localhost', 10000)
         print >> sys.stderr, 'starting up on %s port %s' % server_address
         sock.bind(server_address)
         
         # Listen for incoming connections
         sock.listen(1)
         
         while True:
             # Wait for a connection
             print >> sys.stderr, 'waiting for a connection'
             connection, client_address = sock.accept()
         
             try:
                 print >> sys.stderr, 'connection from', client_address
         
                 # Receive the data in small chunks and retransmit it
                 while True:
                     data = connection.recv(16)
                     print >> sys.stderr, 'received "%s"' % data
                     if data:
                         print >> sys.stderr, 'sending data back to the client'
                         connection.sendall(data)
                     else:
                         print >> sys.stderr, 'no data from', client_address
                         break
         
             finally:
                 # Clean up the connection
                 connection.close()
         
         # Output:
         # <==================================================================
         # starting up on localhost port 10000
         # waiting for a connection
         # connection from ('127.0.0.1', 54054)
         # received "This is the mess"
         # sending data back to the client
         # received "age. It will be "
         # sending data back to the client
         # received "repeated."
         # sending data back to the client
         # received ""
         # no data from ('127.0.0.1', 54054)
         # waiting for a connection
         # ==================================================================>
       #+end_src
**** Echo Client
     + 然后我们建立一个echo client, 向server发送字符串
       #+begin_src python
         import socket
         import sys
         
         # Create a TCP/IP socket
         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         
         # Connect the socket to the port where the server is listening
         server_address = ('localhost', 10000)
         print >> sys.stderr, 'connecting to %s port %s' % server_address
         sock.connect(server_address)
         
         try:
             # Send data
             message = 'This is the message. It will be repeated.'
             print >> sys.stderr, 'sending "%s"' % message
             sock.sendall(message)
         
             # Look for the response
             amount_received = 0
             amount_expected = len(message)
         
             while amount_received < amount_expected:
                 data = sock.recv(16)
                 amount_received += len(data)
                 print >> sys.stderr, 'received "%s"' % data
         
         finally:
             print >> sys.stderr, 'closing socket'
             sock.close()      
         
         # Output:
         # <==================================================================
         # connecting to localhost port 10000
         # sending "This is the message. It will be repeated."
         # received "This is the mess"
         # received "age. It will be "
         # received "repeated."
         # closing socket
         # ==================================================================>
       #+end_src
**** Client and Server Together
     + 从上面的运行结果我们可以看到, client连接到server后,发送了"This is the 
       message. It will be repeated", 然后由于server端是每次只读取16个字符,
       所以形成了上面的样子.
**** Easy Client Connections
     + 上面的client函数还可以简化,因为python lib提供了一个叫做create_connection()
       的函数(就是把sock.sock函数和sock.connect函数合二为一了).这个函数只需要一个
       参数,就是two-value tuple里面包括ip地址和port号.
       #+begin_src python
         import socket
         import sys
         
         def get_constants(prefix):
             """Create a dictionary mapping socket module
             constants to their names.
             
             Arguments:
             - `prefix`:
             """
             return dict( (getattr(socket, n), n)
                          for n in dir(socket)
                          if n.startswith(prefix)
                          )
         
         families = get_constants('AF_')
         types = get_constants('SOCK_')
         protocols = get_constants('IPPROTO_')
         
         # Create a TCP/IP socket
         sock = socket.create_connection(('localhost', 10000))
         
         print >> sys.stderr, 'Family     :', families[sock.family]
         print >> sys.stderr, 'Type       :', types[sock.type]
         print >> sys.stderr, 'Protocol   :', protocols[sock.proto]
         print >> sys.stderr
         
         try:
             # Send data
             message = 'This is the message, It will be repeated.'
             print >> sys.stderr, 'sending "%s"' % message
             sock.sendall(message)
         
             amount_received = 0
             amount_expected = len(message)
         
             while amount_received < amount_expected:
                 data = sock.recv(16)
                 amount_received += len(data)
                 print >> sys.stderr, 'received "%s"' % data
         
         finally:
             print >> sys.stderr, 'closing socket'
             sock.close()
         
         # Output:
         # <==================================================================
         # Family     : AF_INET
         # Type       : SOCK_STREAM
         # Protocol   : IPPROTO_TCP
         # 
         # sending "This is the message, It will be repeated."
         # received "This is the mess"
         # received "age, It will be "
         # received "repeated."
         # closing socket 
         # ==================================================================>
       #+end_src
**** Choosing an Address for Listening
     + server可以在命令行指定端口号
       #+begin_src python
         import socket
         import sys       
         
         # Create a TCP/IP socket
         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         
         # Bind the socket to the port
         server_name = sys.argv[1]
         server_address = (server_name, 10000)
         print >> sys.stderr, 'starting up on %s port %s' % server_address
         sock.bind(server_address)
         
         # Listen for incoming connections
         sock.listen(1)
         
         while True:
             # Wait for a connection
             print >> sys.stderr, 'waiting for a connection'
             connection, client_address = sock.accept()
         
             try:
                 print >> sys.stderr, 'connection from', client_address
         
                 # Receive the data in small chunks and retransmit it
                 while True:
                     data = connection.recv(16)
                     print >> sys.stderr, 'received "%s"' % data
                     if data:
                         print >> sys.stderr, 'sending data back to the client'
                         connection.sendall(data)
                     else:
                         print >> sys.stderr, 'no data from', client_address
                         break
         
             finally:
                 # Clean up the connection
                 connection.close()
         
         # Output:
         # <==================================================================
         # starting up on 116.251.210.230 port 10000
         # waiting for a connection
         # connection from ('27.115.104.70', 52092)
         # received "This is the mess"
         # sending data back to the client
         # received "age, It will be "
         # sending data back to the client
         # received "repeated."
         # sending data back to the client
         # received ""
         # no data from ('27.115.104.70', 52092)
         # waiting for a connection
         # ==================================================================>
       #+end_src
     + client 也要相应改变
       #+begin_src python
         import socket
         import sys
         
         def get_constants(prefix):
             """Create a dictionary mapping socket module
             constants to their names.
             
             Arguments:
             - `prefix`:
             """
             return dict( (getattr(socket, n), n)
                          for n in dir(socket)
                          if n.startswith(prefix)
                          )
         
         families = get_constants('AF_')
         types = get_constants('SOCK_')
         protocols = get_constants('IPPROTO_')
         
         # Create a TCP/IP socket
         sock = socket.create_connection((sys.argv[1], 10000))
         
         print >> sys.stderr, 'Family     :', families[sock.family]
         print >> sys.stderr, 'Type       :', types[sock.type]
         print >> sys.stderr, 'Protocol   :', protocols[sock.proto]
         print >> sys.stderr
         
         try:
             # Send data
             message = 'This is the message, It will be repeated.'
             print >> sys.stderr, 'sending "%s"' % message
             sock.sendall(message)
         
             amount_received = 0
             amount_expected = len(message)
         
             while amount_received < amount_expected:
                 data = sock.recv(16)
                 amount_received += len(data)
                 print >> sys.stderr, 'received "%s"' % data
         
         finally:
             print >> sys.stderr, 'closing socket'
             sock.close()    
         
         # Output:
         # <==================================================================
         # Family     : AF_INET
         # Type       : SOCK_STREAM
         # Protocol   : IPPROTO_IP
         # 
         # sending "This is the message, It will be repeated."
         # received "This is the mess"
         # received "age, It will be "
         # received "repeated."
         # closing socket 
         # ==================================================================>
       #+end_src
     + Server可能不止有一个ip,那么用'0.0.0.0'或者''(空字符)或者INADDR_ANY来在所有
       IP地址监听
*** User Datagram Client and Server

     



       




       

       




      
